# avoid duplicate entries : https://stackoverflow.com/questions/19390600/ansible-lineinfile-duplicates-line
#SSH task AV.1.1.1
- stat:
     path: '{{SSH_CONFIG_FILE}}'
  register: sshd_config_stat


- name: display file status of '{{SSH_CONFIG_FILE}}'
  debug: msg="{{ SSH_CONFIG_FILE }} {{ ' file found on the end point' if sshd_config_stat.stat.exists else ' file not found on the end point, and the following task will be skipped'}}" 


# AV.1.1.1 - task 3
- name: Set PermitEmptyPasswords no for task AV.1.1.1
  replace: 
      path: '{{SSH_CONFIG_FILE}}'  
      regexp: '^(.*)PermitEmptyPasswords(.*)$' 
      replace: '{{PermitEmptyPasswords}}'
  when: sshd_config_stat.stat.exists and SetPermitEmptyPasswords


- name: Check line in ssh config file to set PermitEmptyPasswords no for task AV.1.1.1
  shell: grep ^PermitEmptyPasswords {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_PermitEmptyPasswords_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: insert line in ssh config file to set PermitEmptyPasswords no for task AV.1.1.1
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{PermitEmptyPasswords}}'
  when: CHECK_SSH_PermitEmptyPasswords_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetPermitEmptyPasswords

#- name: Set KeepAlive no for task AV.1.4.1
#  replace: 
#      path: '{{SSH_CONFIG_FILE}}'  
#      regexp: '^KeepAlive(.*)$' 
#      replace: '{{enableKeepAlive}}'
#  when: sshd_config_stat.stat.exists

#- name: Uncomment KeepAlive no for task AV.1.4.1
#  replace: 
#     path: '{{SSH_CONFIG_FILE}}'  
#      regexp: '^#(.*)KeepAlive(.*)$' 
#      replace: '{{enableKeepAlive}}'
#  when: sshd_config_stat.stat.exists

#- name: Check line in ssh config file to Set KeepAlive no for task AV.1.4.1
#  shell: grep ^KeepAlive {{SSH_CONFIG_FILE}} | cat
#  register: CHECK_SSH_EnableKeepAlive_ENTRY
#  when: sshd_config_stat.stat.exists
#  check_mode: no

#- name: insert line in ssh config file to Set KeepAlive no for task AV.1.4.1
#  lineinfile:
#    dest: '{{SSH_CONFIG_FILE}}'
#    line:  '{{enableKeepAlive}}'
#  when: CHECK_SSH_EnableKeepAlive_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists


- name: Set TCPKeepAlive no for task AV.1.4.2
  replace: 
      path: '{{SSH_CONFIG_FILE}}'   
      regexp: '^(.*)TCPKeepAlive(.*)$' 
      replace: '{{enableTCPKeepAlive}}'
  when: sshd_config_stat.stat.exists and SetenableTCPKeepAlive

- name: Check line in ssh config file to set TCPKeepAlive no for task AV.1.4.2
  shell: grep ^TCPKeepAlive {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_enableTCPKeepAlive_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to set TCPKeepAlive no for task AV.1.4.2
  lineinfile:
    path: '{{SSH_CONFIG_FILE}}'
    line:  '{{enableTCPKeepAlive}}'
  when: CHECK_SSH_enableTCPKeepAlive_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetenableTCPKeepAlive



- stat:
     path: '{{SYSCTL_CONF_FILE_PATH}}'
  register: sysctl_config_stat

- name: display file status of '{{SYSCTL_CONF_FILE_PATH}}'
  debug: msg="{{SYSCTL_CONF_FILE_PATH}} {{ ' file found on the end point' if sysctl_config_stat.stat.exists else ' file not found on the end point, and the following task will be skipped'}}" 

#- name: Set keepalive_time for task AV.1.4.14
#  replace: 
#      path: '{{SYSCTL_CONF_FILE_PATH}}'
#      regexp: '^(.*)net.ipv4.tcp_keepalive_time(.*)$' 
#      replace: '{{keepalive_time}}'
#  when: sysctl_config_stat.stat.exists

#- name: Check line in ssh config file to set keepalive_time for task AV.1.4.14
#  shell: grep ^net.ipv4.tcp_keepalive_time {{SYSCTL_CONF_FILE_PATH}} | cat
#  register: CHECK_SSH_keepalive_time_ENTRY
#  when: sysctl_config_stat.stat.exists
#  check_mode: no

#- name: Insert line in ssh config file to set keepalive_time for task AV.1.4.14
#  lineinfile:
#    dest: '{{SYSCTL_CONF_FILE_PATH}}'
#    line:  '{{ keepalive_time }}'
#  when: CHECK_SSH_keepalive_time_ENTRY.stdout_lines != "" and sysctl_config_stat.stat.exists


#- name: Set keepalive_probes for task AV.1.4.14
#  replace: 
#      path: '{{SYSCTL_CONF_FILE_PATH}}' 
#      regexp: '^(.*)net.ipv4.tcp_keepalive_probes(.*)$' 
#      replace: '{{keepalive_probes}}'
#  when: sysctl_config_stat.stat.exists


#- name: Check line in ssh config file to set keepalive_probes for task AV.1.4.14
#  shell: grep ^net.ipv4.tcp_keepalive_probes {{SYSCTL_CONF_FILE_PATH}} | cat
#  register: CHECK_SSH_keepalive_probes_ENTRY
#  when: sysctl_config_stat.stat.exists
#  check_mode: no

#- name: Insert line in ssh config file to set keepalive_probes for task AV.1.4.14
#  lineinfile:
#    dest: '{{SYSCTL_CONF_FILE_PATH}}'
#    line:  '{{ keepalive_probes }}'
#  when: CHECK_SSH_keepalive_probes_ENTRY.stdout_lines != "" and sysctl_config_stat.stat.exists



#- name: Set keepalive_probes for task AV.1.4.14
#  replace: 
#      path: '{{SYSCTL_CONF_FILE_PATH}}'  
#      regexp: '^(.*)net.ipv4.tcp_keepalive_intvl(.*)$' 
#      replace: '{{keepalive_intvl}}'
#  when: sysctl_config_stat.stat.exists


#- name: Check line in ssh config file to set keepalive_probes for task AV.1.4.14
#  shell: grep ^net.ipv4.tcp_keepalive_intvl {{SYSCTL_CONF_FILE_PATH}} | cat
#  register: CHECK_SSH_keepalive_intvl_ENTRY
#  when: sysctl_config_stat.stat.exists
#  check_mode: no

#- name: Insert line in ssh config file to set keepalive_probes for task AV.1.4.14
#  lineinfile:
#    dest: '{{SYSCTL_CONF_FILE_PATH}}'
#    line:  '{{ keepalive_intvl }}'
#  when: CHECK_SSH_keepalive_intvl_ENTRY.stdout_lines != "" and sysctl_config_stat.stat.exists


- name: Reloading /etc/sysctl.conf file after modification
  shell: "/sbin/sysctl -p /etc/sysctl.conf" 


- name: Set LoginGraceTime no for task AV.1.4.3
  replace: 
      path: '{{SSH_CONFIG_FILE}}'
      regexp: '^(.*)LoginGraceTime(.*)$' 
      replace: '{{LoginGraceTime}}'
  when: sshd_config_stat.stat.exists and SetLoginGraceTime
 

- name: Check line in ssh config file to set LoginGraceTime no for task AV.1.4.3
  shell: grep ^LoginGraceTime {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_LoginGraceTime_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to set LoginGraceTime no for task AV.1.4.3
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ LoginGraceTime }}'
  when: CHECK_SSH_LoginGraceTime_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetLoginGraceTime


#- name: Set MaxConnections no for task AV.1.4.4
#  lineinfile: 
#      dest: /etc/ssh/sshd_config  
#      regexp: '^(.*)MaxConnections(.*)$' 
#      line: '{{MaxConnections}}'
#      backrefs: yes
#  when: sshd_config_stat.stat.exists

#- name: Set MaxConnections no for task AV.1.4.4
#  lineinfile: 
#      dest: /etc/ssh/sshd_config  
#      line: '{{MaxConnections}}'
#  when: sshd_config_stat.stat.exists


- name: Set MaxStartups no for task AV.1.4.5
  replace: 
      path: '{{SSH_CONFIG_FILE}}' 
      regexp: '^(.*)MaxStartups(.*)$' 
      replace: '{{MaxStartups}}'
  when: sshd_config_stat.stat.exists and SetMaxStartups

- name: Check line in ssh config file to set MaxStartups no for task AV.1.4.5
  shell: grep ^MaxStartups {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_MaxStartups_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to set MaxStartups no for task AV.1.4.5
  lineinfile:
    path: '{{SSH_CONFIG_FILE}}'
    line:  '{{ MaxStartups }}'
  when: CHECK_SSH_MaxStartups_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetMaxStartups

- name: Set MaxAuthTries for task AV.1.4.8
  replace: 
      path: '{{SSH_CONFIG_FILE}}' 
      regexp: '^(.*)MaxAuthTries(.*)$' 
      replace: '{{MaxAuthTries}}'
  when: sshd_config_stat.stat.exists and SetMaxAuthTries


- name: Check line in ssh config file to set MaxAuthTries for task AV.1.4.8
  shell: grep ^MaxAuthTries {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_MaxAuthTries_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to set MaxAuthTries for task AV.1.4.8
  lineinfile:
    path: '{{SSH_CONFIG_FILE}}'
    line:  '{{ MaxAuthTries }}'
  when: CHECK_SSH_MaxAuthTries_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetMaxAuthTries



- name: Set PermitRootLogin no for task AV.1.7.1.1
  replace: 
      path: '{{SSH_CONFIG_FILE}}'  
      regexp: '^(.*)PermitRootLogin(.*)$' 
      replace: '{{PermitRootLogin}}'
  when: sshd_config_stat.stat.exists and SetPermitRootLogin


- name: Check line in ssh config file to set PermitRootLogin no for task AV.1.7.1.1
  shell: grep ^PermitRootLogin {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_PermitRootLogin_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to setPermitRootLogin no for task AV.1.7.1.1
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ PermitRootLogin }}'
  when: CHECK_SSH_PermitRootLogin_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetPermitRootLogin

#- name: Set IgnoreRhosts no for task AV.1.7.4
#  replace: 
#      path: '{{SSH_CONFIG_FILE}}' 
#      regexp: '^(.*)IgnoreRhosts(.*)$' 
#      replace: '{{IgnoreRhosts}}'
#  when: sshd_config_stat.stat.exists

#- name: Check line in ssh config file to set IgnoreRhosts no for task AV.1.7.4
#  shell: grep ^IgnoreRhosts {{SSH_CONFIG_FILE}} | cat
#  register: CHECK_SSH_IgnoreRhosts_ENTRY
#  when: sshd_config_stat.stat.exists
#  check_mode: no

#- name: Insert line in ssh config file to IgnoreRhosts no for task AV.1.7.4
#  lineinfile:
#    dest: '{{SSH_CONFIG_FILE}}'
#    line:  '{{ IgnoreRhosts }}'
#  when: CHECK_SSH_IgnoreRhosts_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists


- name: Set PubkeyAuthentication no for task AV.1.7.5
  replace: 
      path: '{{SSH_CONFIG_FILE}}' 
      regexp: '^(.*)PubkeyAuthentication(.*)$' 
      replace: '{{PubkeyAuthentication}}'
  when: sshd_config_stat.stat.exists and SetPubkeyAuthentication

- name: Check line in ssh config file to set PubkeyAuthentication no for task AV.1.7.5
  shell: grep ^PubkeyAuthentication {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_PubkeyAuthentication_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to PubkeyAuthentication no for task AV.1.7.5
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ PubkeyAuthentication }}'
  when: CHECK_SSH_PubkeyAuthentication_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetPubkeyAuthentication


- name: Set RSAAuthentication no for task AV.1.7.5--
  replace: 
      path: '{{SSH_CONFIG_FILE}}' 
      regexp: '^(.*)RSAAuthentication(.*)$' 
      replace: '{{RSAAuthentication}}'
  when: sshd_config_stat.stat.exists and SetRSAAuthentication

- name: Check line in ssh config file to set RSAAuthentication no for task AV.1.7.5
  shell: grep ^RSAAuthentication {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_RSAAuthentication_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to RSAAuthentication no for task AV.1.7.5
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ RSAAuthentication }}'
  when: CHECK_SSH_RSAAuthentication_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetRSAAuthentication


- name: Set HostbasedAuthentication no for task AV.1.7.6
  replace: 
      path: '{{SSH_CONFIG_FILE}}' 
      regexp: '^(.*)HostbasedAuthentication(.*)$' 
      replace: '{{HostbasedAuthentication}}'
  when: sshd_config_stat.stat.exists and SetHostbasedAuthentication

- name: Check line in ssh config file to set HostbasedAuthentication no for task AV.1.7.6
  shell: grep ^HostbasedAuthentication {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_HostbasedAuthentication_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to HostbasedAuthentication no for task AV.1.7.6
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ HostbasedAuthentication }}'
  when: CHECK_SSH_HostbasedAuthentication_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetHostbasedAuthentication


- name: Set PrintMotd no for task AV.2.0.1.1
  replace: 
      path: '{{SSH_CONFIG_FILE}}'  
      regexp: '^(.*)PrintMotd(.*)$' 
      replace: '{{PrintMotd}}'
  when: sshd_config_stat.stat.exists and SetPrintMotd

- name: Check line in ssh config file to set PrintMotd no for task AV.2.0.1.1
  shell: grep ^PrintMotd {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_PrintMotd_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to set PrintMotd no for task AV.2.0.1.1
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ PrintMotd }}'
  when: CHECK_SSH_PrintMotd_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetPrintMotd



- name: Set ServerKeyBits no for task - AV.2.1.2
  replace: 
      path: '{{SSH_CONFIG_FILE}}' 
      regexp: '^(.*)ServerKeyBits(.*)$' 
      replace: '{{ServerKeyBits}}'
  when: sshd_config_stat.stat.exists and SetServerKeyBits


- name: Check line in ssh config file to set ServerKeyBits no for task - AV.2.1.2
  shell: grep ^ServerKeyBits {{SSH_CONFIG_FILE}} | cat
  register: CHECK_SSH_ServerKeyBits_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: Insert line in ssh config file to set ServerKeyBits no for task - AV.2.1.2
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{ ServerKeyBits }}'
  when: CHECK_SSH_ServerKeyBits_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetServerKeyBits


# task AV.1.7.3.2
- name: AV.1.7.3.2 Checking '{{ hosts_equiv }}'  file status
  stat:
   path: "{{ hosts_equiv }}"
  register: hosts_equiv_file_state

- name: Display  '{{ hosts_equiv }}'  file status for AV.1.7.3.2
  debug: msg="{{ 'hosts_equiv file found on the end point, deleting the file  as per AV.1.7.3.2' if hosts_equiv_file_state.stat.exists else ' hosts_equiv file not found on the end point hence the folloing task will be skipped'}}" 


- name: AV.1.7.3.2 - delete  "{{ hosts_equiv}}" host-based authentication
  file:
   path: "{{ hosts_equiv }}"
   state: absent
  when: hosts_equiv_file_state.stat.exists and SetHosts_equiv



- name: replace the line in ssh config file to set Ciphers for the task AV.2.1.1.2,AV.2.1.1.3 and AV.2.1.1.4
  replace:
    path: '{{SSH_CONFIG_FILE}}'
    regexp: '^(.*)Ciphers(.*)$'
    replace: '{{ Native_Encryption_Ciphers }}'
  when: sshd_config_stat.stat.exists and SetNative_Encryption_Ciphers

- name: Check line in ssh config file to set Ciphers for the task AV.2.1.1.2,AV.2.1.1.3 and AV.2.1.1.4
  shell: grep ^Ciphers {{SSH_CONFIG_FILE}} | cat
  register: CHECK_CIPHERS_ENTRY
  when: sshd_config_stat.stat.exists
  check_mode: no

- name: insert line in ssh config file to set Ciphers for the task AV.2.1.1.2,AV.2.1.1.3 and AV.2.1.1.4
  lineinfile:
    dest: '{{SSH_CONFIG_FILE}}'
    line:  '{{Native_Encryption_Ciphers}}'
  when: CHECK_CIPHERS_ENTRY.stdout_lines != "" and sshd_config_stat.stat.exists and SetNative_Encryption_Ciphers
